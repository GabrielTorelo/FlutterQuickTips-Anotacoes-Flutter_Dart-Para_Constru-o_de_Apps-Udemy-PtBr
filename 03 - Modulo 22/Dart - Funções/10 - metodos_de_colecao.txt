Introdução aos métodos de coleção:
  Conceito: Métodos de coleção são funções que podem ser aplicadas a coleções (listas, conjuntos, mapas) para realizar operações específicas como filtrar, mapear, reduzir, entre outras.
  Uso: Utilizados para manipular e transformar coleções de forma eficiente e expressiva, simplificando o código e melhorando a legibilidade.
  Analogia: Assim como você usa ferramentas diferentes para manipular ingredientes na cozinha (panelas, facas e liquidificadores), você usa métodos de coleção para manipular e transformar dados em seu código.

* Método de filtro (where):
  Conceito: O método de filtro é usado para criar uma nova coleção contendo apenas os elementos que satisfazem uma condição específica.
  Uso: Utilizado para selecionar elementos de uma coleção que atendem a um critério específico.
  Exemplos:
    1 - Filtrar números pares de uma lista:
      final List<int> numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      print("Números pares: ${numeros.where((numero) => numero % 2 == 0).toList()}");
    2 - Filtrar nomes que contêm a letra 'a':
      final List<String> nomes = ['Ana', 'Bia', 'Carlos', 'Daniel', 'Eduardo', 'Felipe'];
      print("Nomes com a letra 'a': ${nomes.where((nome) => nome.contains('a')).toList()}");

* Método de mapeamento (map):
  Conceito: O método de mapeamento (map) é usado para transformar cada elemento de uma coleção em um novo elemento, criando uma nova coleção com os resultados (não modifica a coleção original).
  Uso: Utilizado para aplicar uma função a cada elemento de uma coleção, transformando os elementos de acordo com a função definida.
  Exemplo:
    1 - Imprimir nome dos alunos de uma lista de mapas:
      final List<Map<String, dynamic>> alunos = [{'nome': 'Alfredo', 'nota': 9.9}];
      final Iterable<String> nomeAlunos = alunos.map((aluno) => aluno['nome']);

* Método de redução (reduce):
  Conceito: O método de redução (reduce) é usado para combinar todos os elementos de uma coleção em um único valor, aplicando uma função cumulativa de forma iterativa.
  Uso: Utilizado para realizar operações como soma, produto, concatenação ou qualquer outra operação que combine elementos sequencialmente, reduzindo a coleção a um único resultado.
  Exemplo:
    1 - Somar todas os valores de uma lista:
      final List<double> notas = [9.9, 9.3, 8.7, 5.1, 3.6, 4.8];
      final double total = notas.reduce((acumulador, nota) => acumulador + nota;);
